var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
define("ConfigError", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const version = '@Errors 0.0.1';
    class VErr extends Error {
        constructor(message) {
            super(message);
            this.validatorCompatible = true;
        }
    }
    class VTypeError extends TypeError {
        constructor(message) {
            super(message);
            this.validatorCompatible = true;
        }
    }
    class VReferenceError extends ReferenceError {
        constructor(message) {
            super(message);
            this.validatorCompatible = true;
        }
    }
    function customError(error = Error) {
        if (typeof error !== "function") {
            throw new TypeError("error must be a function");
        }
        return class CostomError extends error {
            constructor(msg) {
                super(msg);
                this.validatorCompatible = true;
            }
        };
    }
    function errorHandler(err = VErr, msg, data) {
        if (new err("sample").validatorCompatible !== true) {
            throw new Error("error must be a validitor error");
        }
        class VError extends err {
            constructor() {
                super(msg);
                this.version = version;
                this.data = data;
                this.validatorCompatible = true;
            }
        }
        function Logger() {
            return {
                onError: function () {
                    throw new VError();
                },
                onSuccess: function () { },
                get data() {
                    return data;
                },
                log() {
                    console.log(this.data);
                }
            };
        }
        return Logger;
    }
    function customerrorHandler(err = VErr, msg, data, config) {
        if (new err("sample").validatorCompatible !== true) {
            throw new Error("error must be a validitor error");
        }
        class VError extends err {
            constructor() {
                super(msg);
                this.version = version;
                this.data = data;
                this.validatorCompatible = true;
            }
        }
        function Logger() {
            return {
                onError: function () {
                    config.onError(new VError());
                },
                onSuccess: function () {
                    config.onSuccess();
                },
                get data() {
                    return data;
                },
                log() {
                    console.log(this.data);
                }
            };
        }
        return Logger;
    }
    errorHandler.custom = customerrorHandler;
    const ConfigError = {
        VErr, VTypeError, customError, VReferenceError, errorHandler
    };
    exports.default = ConfigError;
});
define("Validate", ["require", "exports", "ConfigError"], function (require, exports, ConfigError_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ConfigError_js_1 = __importDefault(ConfigError_js_1);
    const { VTypeError } = ConfigError_js_1.default;
    function Validate(condition, ErrHandler) {
        if (typeof condition !== "boolean") {
            throw new VTypeError('conditions must be typeof boolean');
        }
        if (typeof ErrHandler !== "function") {
            throw new VTypeError(`errors must be a function or must be a function`);
        }
        if (ErrHandler().validatorCompatible !== true) {
            throw new VTypeError(`ErrHandler must be a errorLogger function`);
        }
        if (condition === true) {
            ErrHandler(condition).onSuccess();
        }
        else {
            ErrHandler(condition).onError();
        }
    }
    exports.default = Validate;
});
define("Type", ["require", "exports", "ConfigError", "Validate"], function (require, exports, ConfigError_js_2, Validate_js_1) {
    "use strict";
    var _Type__compare;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validate = exports.verify = void 0;
    ConfigError_js_2 = __importDefault(ConfigError_js_2);
    Validate_js_1 = __importDefault(Validate_js_1);
    const __version = '- @Types 0.0.1 ';
    const { VTypeError } = ConfigError_js_2.default;
    class Type_ {
        constructor(name, type) {
            _Type__compare.set(this, void 0);
            this.name = name;
            this.version = __version;
            this.type = type;
            __classPrivateFieldSet(this, _Type__compare, () => {
                return true;
            }, "f");
        }
        compare(comparason) {
            return __classPrivateFieldGet(this, _Type__compare, "f").call(this, comparason);
        }
        setComparason(comparasonFunc) {
            if (typeof comparasonFunc !== 'function') {
                throw new VTypeError(`${comparasonFunc} is needed to function`);
            }
            __classPrivateFieldSet(this, _Type__compare, comparasonFunc, "f");
        }
    }
    _Type__compare = new WeakMap();
    function Type(name, type) {
        return new Type_(name, type);
    }
    const verify = function (variable, _Type) {
        const error = new VTypeError(`${variable} is typeof ${typeof variable} required type is ${_Type.name}`);
        if (_Type.compare(variable) !== true) {
            throw error;
        }
    };
    exports.verify = verify;
    const validate = function (variable, _Type, handler) {
        const condition = _Type.compare(variable);
        (0, Validate_js_1.default)(condition, handler);
    };
    exports.validate = validate;
    Type.verify = exports.verify;
    Type.validate = exports.validate;
    exports.default = Type;
});
define("InterfaceContent", ["require", "exports", "ConfigError"], function (require, exports, ConfigError_js_3) {
    "use strict";
    var _InterfaceContent_validation;
    Object.defineProperty(exports, "__esModule", { value: true });
    ConfigError_js_3 = __importDefault(ConfigError_js_3);
    const __version = 'InterfaceContent @version 0.0.0';
    const { VReferenceError, VTypeError } = ConfigError_js_3.default;
    class InterfaceContent {
        constructor(name, type, required = false, validation) {
            _InterfaceContent_validation.set(this, void 0);
            this.name = name;
            this.type = type;
            this.required = required || false;
            __classPrivateFieldSet(this, _InterfaceContent_validation, validation, "f");
            this.version = __version;
            this.value = undefined;
        }
        set content(value) {
            if (this.required === true && value === undefined) {
                throw new VReferenceError(`${this.name} is required to have a value`);
            }
            else if (value !== undefined && this.type.compare(value) !== true) {
                throw new VTypeError(`sorry but the value provided for "${this.name}" is not typeof ${this.type.name}`);
            }
            else {
                this.value = value;
            }
            if (typeof __classPrivateFieldGet(this, _InterfaceContent_validation, "f") === 'function') {
                __classPrivateFieldGet(this, _InterfaceContent_validation, "f").call(this, this.value);
            }
        }
    }
    _InterfaceContent_validation = new WeakMap();
    console.log(`thanks for using ${__version} visit github for more imformation`);
    exports.default = InterfaceContent;
});
define("Types", ["require", "exports", "Type"], function (require, exports, Type_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Types = void 0;
    Type_js_1 = __importDefault(Type_js_1);
    function _str() {
        const strType = (0, Type_js_1.default)("str", "string");
        strType.setComparason(function (variable) {
            return typeof variable === "string";
        });
        return strType;
    }
    function _int() {
        const intType = (0, Type_js_1.default)("number", "number");
        intType.setComparason(function (variable) {
            return typeof variable === "number";
        });
        return intType;
    }
    function _bool() {
        const boolType = (0, Type_js_1.default)("boolean", "boolean");
        boolType.setComparason(function (variable) {
            return typeof variable === "boolean";
        });
        return boolType;
    }
    function _bint() {
        const bintType = (0, Type_js_1.default)("bignt", "bigint");
        bintType.setComparason(function (variable) {
            return typeof variable === "bigint";
        });
        return bintType;
    }
    function _obj() {
        const objType = (0, Type_js_1.default)("object", "object");
        objType.setComparason(function (variable) {
            return typeof variable === "object";
        });
        return objType;
    }
    function _func() {
        const funcType = (0, Type_js_1.default)("function", "function");
        funcType.setComparason(function (variable) {
            return typeof variable === "function";
        });
        return funcType;
    }
    function _defined() {
        const definedType = (0, Type_js_1.default)("defined", "not undefined");
        definedType.setComparason(function (variable) {
            return variable !== undefined;
        });
        return definedType;
    }
    function _notdefined() {
        const notdefinedType = (0, Type_js_1.default)("notdefined", "undefined");
        notdefinedType.setComparason(function (variable) {
            return variable === undefined;
        });
        return notdefinedType;
    }
    function _typenull() {
        const nullType = (0, Type_js_1.default)("typenull", "null");
        nullType.setComparason(function (variable) {
            return variable === null;
        });
        return nullType;
    }
    function _any() {
        const anyType = (0, Type_js_1.default)("any", "any");
        anyType.setComparason(function (variable) {
            return true;
        });
        return anyType;
    }
    const int = _int();
    const any = _any();
    const str = _str();
    const bool = _bool();
    const bint = _bint();
    const obj = _obj();
    const func = _func();
    const defined = _defined();
    const notdefined = _notdefined();
    const typenull = _typenull();
    exports.Types = {
        int, any, str, bool, bint, obj, func, defined, notdefined, typenull
    };
    exports.default = exports.Types;
});
define("Interface", ["require", "exports", "InterfaceContent", "Types"], function (require, exports, InterfaceContent_js_1, Types_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    InterfaceContent_js_1 = __importDefault(InterfaceContent_js_1);
    Types_js_1 = __importDefault(Types_js_1);
    const { int, str } = Types_js_1.default;
    function Interface(config) {
        const KEYS = Object.keys(config);
        const _interface = {};
        KEYS.forEach((interfaceContent) => {
            const index = interfaceContent;
            if (index !== '_name') {
                _interface[index] = config[index];
            }
        });
        try {
            return function Validate(_contents) {
                const _outPut = {};
                KEYS.forEach((_keys) => {
                    const content = _contents[_keys] || null;
                    if (_keys !== "_name") {
                        _outPut[_keys] = content;
                    }
                });
                return _outPut;
            };
        }
        catch (e) {
            console.warn(`there's an error occord while using the ${config._name} Interface`);
        }
    }
    Interface.Content = InterfaceContent_js_1.default;
    exports.default = Interface;
});
define("Verify", ["require", "exports", "ConfigError"], function (require, exports, ConfigError_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ConfigError_js_4 = __importDefault(ConfigError_js_4);
    const VTypeError = ConfigError_js_4.default.VTypeError;
    function Verify(condition, errText) {
        if (typeof condition !== "boolean") {
            throw new VTypeError('conditions must be typeof boolean');
        }
        if (condition !== true) {
            throw new Error(errText || "");
        }
    }
    exports.default = Verify;
});
define("onlyIf", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function onlyIf(condition) {
        return {
            execute: function (Func) {
                if (condition === true) {
                    Func();
                }
            }
        };
    }
    onlyIf.not = function (condition) {
        return {
            execute: function (Func) {
                if (condition === false) {
                    Func();
                }
            }
        };
    };
    onlyIf.typeof = function (variables) {
        return {
            is: function (Type) {
                return {
                    execute: function (Func) {
                        if (Type.compare(variables) === true) {
                            Func();
                        }
                    }
                };
            },
            isnot: function (Type) {
                return {
                    execute: function (Func) {
                        if (Type.compare(variables) === false) {
                            Func();
                        }
                    }
                };
            }
        };
    };
    function test() {
        console.log('the condition givin is true and it is prented');
    }
    exports.default = onlyIf;
});
define("main", ["require", "exports", "Validate", "Verify", "Type", "Types", "ConfigError", "onlyIf", "Interface", "InterfaceContent"], function (require, exports, Validate_js_2, Verify_js_1, Type_js_2, Types_js_2, ConfigError_js_5, onlyIf_js_1, Interface_js_1, InterfaceContent_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InterfaceContent = exports.Interface = exports.onlyIf = exports.VError = exports.Types = exports.Type = exports.Verify = exports.Validate = void 0;
    Validate_js_2 = __importDefault(Validate_js_2);
    Verify_js_1 = __importDefault(Verify_js_1);
    Type_js_2 = __importDefault(Type_js_2);
    Types_js_2 = __importDefault(Types_js_2);
    ConfigError_js_5 = __importDefault(ConfigError_js_5);
    onlyIf_js_1 = __importDefault(onlyIf_js_1);
    Interface_js_1 = __importDefault(Interface_js_1);
    InterfaceContent_js_2 = __importDefault(InterfaceContent_js_2);
    exports.Validate = Validate_js_2.default;
    exports.Verify = Verify_js_1.default;
    exports.Type = Type_js_2.default;
    exports.Types = Types_js_2.default;
    exports.VError = ConfigError_js_5.default;
    exports.onlyIf = onlyIf_js_1.default;
    exports.Interface = Interface_js_1.default;
    exports.InterfaceContent = InterfaceContent_js_2.default;
    const main = {
        Validate: exports.Validate, Verify: exports.Verify, Type: exports.Type, Types: exports.Types, VError: exports.VError, onlyIf: exports.onlyIf, Interface: exports.Interface, InterfaceContent: exports.InterfaceContent
    };
    exports.default = main;
});
