// Test Import 
// import {int} from "./Types.js";
import {Type} from "./Type.js";
// 
const __version:string = 'Interface @version 0.0.0';

export class InterfaceContent {
  name:string;
  type:any;
  required:boolean;
  #validation:Function|undefined;
  version:string ;
  value:any;
  #defaultValue:any;
  constructor(name:string, type:any, defaultValue?:any, required:boolean=false, validation?:Function){
    this.name = name ;
    this.type = type;
    this.required= required || false;
    this.#validation = validation;
    this.version = __version;
    this.value = undefined;
    this.#defaultValue = defaultValue;
  }
  
  set content(value:any){
    if(value === undefined){
      value = this.#defaultValue;
    }
    if(this.required === true && value === undefined && this.#defaultValue === undefined){
      throw new ReferenceError(`${this.name} is required to have a value`)
    } else if(value !== undefined && this.type.compare(value) !== true){
      throw new TypeError(`sorry but the value provided for "${this.name}" is not typeof ${this.type.name}`)
    } else {
      this.value = value;
    }
    
    if(typeof this.#validation === 'function'){
      this.#validation(this.value);
    }
  }
  
}

// Test
// const itsInterfaceContent:any = new InterfaceContent("lowe",int,true);
// setting value 
// itsInterfaceContent.content = "11" ; /** error **/
// itsInterfaceContent.content = 12 ; /** no error **/

// trying no content 

// console.log(itsInterfaceContent.content)
