const __version:string = '- @Types 0.0.1 ';
import {Validate} from "./Validate.js";
 class Type_ {
  name:string;
  type:string;
  version:string;
  #compare:Function;
  #defined:boolean;
  constructor(name:string, type:string){
    this.name = name;
    this.version  = __version;
    this.type = type;
    this.#defined = false ;
    this.#compare = ():boolean => {
      return true;
    }
  }
   compare(comparason:any) {
     if(this.#defined === false){
       this.#defined = true;
    return this.#compare(comparason);
     }
  }
  
  setComparason(comparasonFunc:Function){
    if(typeof comparasonFunc !== 'function'){
      throw new TypeError(`${comparasonFunc} is needed to function`);
    }
    this.#compare = comparasonFunc;
  }
  
}
export function Type(name:string,type:string){
  return new Type_(name,type);
}
 const verify:Function = function(variable:any,_Type:any):void{
  const error = new TypeError(`${variable} is typeof ${typeof variable } required type is ${_Type.name}`);
  if(_Type.compare(variable) !== true){
    throw error;
  }
}


 const validate = function(variable:any,_Type:any,handler:any){
  const condition = _Type.compare(variable);
  Validate(condition,handler);
  }
Type.verify = verify;
Type.validate = validate;


