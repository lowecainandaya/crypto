/**
 * @params condition  // boolean
 * @params Func       // function to be executed if @params condition is true 
**/
// import for tests 
import {Type} from "./Type.js";

export function onlyIf(condition:boolean):Object{
  return {
    execute : function(Func:Function){
    if(condition === true){
      Func();
    }
  }
  
  }
  
}
onlyIf.not = function(condition:boolean){
   return {
    execute : function(Func:Function){
    if(condition === false){
      Func()
    }
  }
}
}
onlyIf.typeof = function(variables:boolean){
  return  {
    is : function(Type:any){
      return {
        execute : function(Func:Function){
          if(Type.compare(variables) === true){
            Func();
          }
        }
      }
    },
    isnot : function(Type:any){
      return {
        execute : function (Func:Function){
          if(Type.compare(variables) === false){
            Func();
          }
        }
      }
    }
  }
}


// Function to test 
function test(){
  console.log('the condition givin is true and it is prented');
}
// test 
// 1 not going to be executed 
// onlyIf(1 < 0).execute(test)

// going to be executed 
// onlyIf(1 > 0).execute(test)

// onlyIf.not(false == 1 ).execute(test)

// onlyif.typeof.is 

// onlyIf.typeof("").is(Types.str).execute(test)
// onlyIf.typeof("").isnot(Types.str).execute(test)



