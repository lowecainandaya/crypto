"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Type__compare, _Type__defined;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const __version = '- @Types 0.0.1 ';
const Validate_js_1 = require("./Validate.js");
class Type_ {
    constructor(name, type) {
        _Type__compare.set(this, void 0);
        _Type__defined.set(this, void 0);
        this.name = name;
        this.version = __version;
        this.type = type;
        __classPrivateFieldSet(this, _Type__defined, false, "f");
        __classPrivateFieldSet(this, _Type__compare, () => {
            return true;
        }, "f");
    }
    compare(comparason) {
        if (__classPrivateFieldGet(this, _Type__defined, "f") === false) {
            __classPrivateFieldSet(this, _Type__defined, true, "f");
            return __classPrivateFieldGet(this, _Type__compare, "f").call(this, comparason);
        }
    }
    setComparason(comparasonFunc) {
        if (typeof comparasonFunc !== 'function') {
            throw new TypeError(`${comparasonFunc} is needed to function`);
        }
        __classPrivateFieldSet(this, _Type__compare, comparasonFunc, "f");
    }
}
_Type__compare = new WeakMap(), _Type__defined = new WeakMap();
function Type(name, type) {
    return new Type_(name, type);
}
exports.Type = Type;
const verify = function (variable, _Type) {
    const error = new TypeError(`${variable} is typeof ${typeof variable} required type is ${_Type.name}`);
    if (_Type.compare(variable) !== true) {
        throw error;
    }
};
const validate = function (variable, _Type, handler) {
    const condition = _Type.compare(variable);
    (0, Validate_js_1.Validate)(condition, handler);
};
Type.verify = verify;
Type.validate = validate;
